// Place your key bindings in this file to override the defaults
[
    {
        "key": "y",
        "command": "filesExplorer.copy",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !inputFocus"
    },
    {
        "key": "ctrl+c",
        "command": "-filesExplorer.copy",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !inputFocus"
    },
    {
        "key": "x",
        "command": "deleteFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "d",
        "command": "filesExplorer.cut",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "ctrl+x",
        "command": "-filesExplorer.cut",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "f",
        "command": "filesExplorer.findInFolder",
        "when": "explorerResourceIsFolder && filesExplorerFocus && foldersViewVisible && !inputFocus"
    },
    {
        "key": "shift+alt+f",
        "command": "-filesExplorer.findInFolder",
        "when": "explorerResourceIsFolder && filesExplorerFocus && foldersViewVisible && !inputFocus"
    },
    {
        "key": "l",
        "command": "filesExplorer.openFilePreserveFocus",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus"
    },
    {
        "key": "space",
        "command": "-filesExplorer.openFilePreserveFocus",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus"
    },
    {
        "key": "p",
        "command": "filesExplorer.paste",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "ctrl+v",
        "command": "-filesExplorer.paste",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "r",
        "command": "renameFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "f2",
        "command": "-renameFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "a",
        "command": "explorer.newFile",
        "when": "filesExplorerFocus && foldersViewVisible && !inputFocus"
    },
    {
        "key": "Shift+a",
        "command": "explorer.newFolder",
        "when": "filesExplorerFocus && foldersViewVisible && !inputFocus"
    },
    {
        "key": "ctrl+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "Ctrl+e",
        "command": "workbench.view.explorer"
    },
    {
        "key": "Ctrl+e",
        "command": "workbench.action.toggleSidebarVisibility",
        "when": "activeViewlet == 'workbench.view.explorer' || activeViewlet == 'workbench.view.search'|| activeViewlet == 'workbench.view.scm'|| activeViewlet == 'workbench.view.debug'|| activeViewlet == 'workbench.view.extensions' || activeViewlet == 'workbench.view.extension.test'|| activeViewlet == 'workbench.view.extension.bookmarks'|| activeViewlet == 'workbench.view.extension.project-manager' || activeViewlet == 'workbench.view.extension.gitlens'|| activeViewlet == 'workbench.view.extension.todo-tree-container'|| activeViewlet == 'snippet-explorer'"
    },
    {
        "key": "tab+j",
        "command": "workbench.action.quickOpenNavigateNext",
        "when": "!editorTextFocus"
    },
    {
        "key": "tab+k",
        "command": "workbench.action.quickOpenNavigatePrevious",
        "when": "!editorTextFocus"
    },

// ██╗░░██╗░█████╗░██╗░░██╗░█████╗░██╗░░░██╗███╗░░██╗███████╗
// ██║░██╔╝██╔══██╗██║░██╔╝██╔══██╗██║░░░██║████╗░██║██╔════╝
// █████═╝░███████║█████═╝░██║░░██║██║░░░██║██╔██╗██║█████╗░░
// ██╔═██╗░██╔══██║██╔═██╗░██║░░██║██║░░░██║██║╚████║██╔══╝░░
// ██║░╚██╗██║░░██║██║░╚██╗╚█████╔╝╚██████╔╝██║░╚███║███████╗
// ╚═╝░░╚═╝╚═╝░░╚═╝╚═╝░░╚═╝░╚════╝░░╚═════╝░╚═╝░░╚══╝╚══════╝
    // Set mode
    {
        "key": "escape",
        "command": "dance.modes.set.normal",
        "when": "editorTextFocus && (dance.mode != normal && !vim.active && vim.mode != Insert)"
    },
    {
        "key": "ctrl+c",
        "command": "dance.modes.set",
        "args": {"input": "character"},
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD || dance.mode == line || dance.mode == LINE || dance.mode == normal)"
    },
    {
        "key": "ctrl+c",
        "command": "toggleVim",
        "when": "editorTextFocus && (vim.active || vim.mode == Insert || vim.mode == Visual || vim.mode == Normal)"
    },
    {
        "key": "ctrl+c",
        "command": "dance.modes.set",
        "args": {"input": "word"},
        "when": "editorTextFocus && (dance.mode == insert)"
    },
    {
        "key": "w",
        "command": "dance.modes.set",
        "args": {"input": "word"},
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD || dance.mode == line || dance.mode == LINE)"
    },
    {
        "key": "shift+w",
        "command": "dance.modes.set",
        "args": {"input": "WORD"},
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD|| dance.mode == line || dance.mode == LINE)"
    },
    {
        "key": "x",
        "command": "dance.modes.set",
        "args": {"input": "line"},
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD || dance.mode == line || dance.mode == LINE)"
    },
    {
        "key": "shift+x",
        "command": "dance.modes.set",
        "args": {"input": "LINE"},
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD || dance.mode == line || dance.mode == LINE)"
    },


    // H
    {
        "key": "h",
        "command": "dance.select.left.jump",
        "when": "editorTextFocus && dance.mode == character"
    },
    {
        "key": "h",
        "command": "dance.seek.word.backward",
        "when": "editorTextFocus && dance.mode == word"
    },
    {
        "key": "h",
        "command": "dance.seek.word.ws.backward",
        "when": "editorTextFocus && dance.mode == WORD"
    },
    {
        "key": "h",
        "command": "dance.select.lineStart",
        "args": {"skipBlank": true},
        "when": "editorTextFocus && (dance.mode == line || dance.mode == LINE)"
    },

    {
        "key": "shift+h",
        "command": "dance.select.left.extend",
        "when": "editorTextFocus && dance.mode == character"
    },
    {
        "key": "shift+h",
        "command": "dance.seek.word.extend.backward",
        "when": "editorTextFocus && dance.mode == word"
    },
    {
        "key": "shift+h",
        "command": "dance.seek.word.ws.extend.backward",
        "when": "editorTextFocus && dance.mode == WORD"
    },
    {
        "key": "shift+h",
        "command": "dance.select.lineStart.extend",
        "when": "editorTextFocus && (dance.mode == line || dance.mode == LINE)"
    },


    // L
    {
        "key": "l",
        "command": "dance.select.right.jump",
        "when": "editorTextFocus && dance.mode == character"
    },
    {
        "key": "l",
        "command": "dance.seek.wordEnd",
        "when": "editorTextFocus && dance.mode == word"
    },
    {
        "key": "l",
        "command": "dance.seek.wordEnd.ws",
        "when": "editorTextFocus && dance.mode == WORD"
    },
    {
        "key": "l",
        "command": "dance.select.lineEnd",
        "args": {"skipBlank": true},
        "when": "editorTextFocus && (dance.mode == line || dance.mode == LINE)"
    },

    {
        "key": "shift+l",
        "command": "dance.select.right.extend",
        "when": "editorTextFocus && dance.mode == character"
    },
    {
        "key": "shift+l",
        "command": "dance.seek.wordEnd.extend",
        "when": "editorTextFocus && dance.mode == word"
    },
    {
        "key": "shift+l",
        "command": "dance.seek.wordEnd.ws.extend",
        "when": "editorTextFocus && dance.mode == WORD"
    },
    {
        "key": "shift+l",
        "command": "dance.select.lineEnd.extend",
        "when": "editorTextFocus && (dance.mode == line || dance.mode == LINE)"
    },
   
    
    // J
    {
        "key": "j",
        "command": "dance.select.down.jump",
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD)"
    },
    {
        "key": "j",
        "command": "dance.run",
        "args": {
            "commands": [
                ["dance.select.down.jump"],
                ["dance.selections.expandToLines"],
            ]
        },
        "when": "editorTextFocus && dance.mode == line"
    },
    {
        "key": "j",
        "command": "dance.seek.object",
        "args": {"input": "(?#predefined=paragraph)", "where": "end"},
        "when": "editorTextFocus && dance.mode == LINE"
    },

    {
        "key": "shift+j",
        "command": "dance.select.down.extend",
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD)"
    },
    {
        "key": "shift+j",
        "command": "dance.select.line.below.extend",
        "when": "editorTextFocus && dance.mode == line"
    },
    {
        "key": "shift+j",
        "command": "dance.seek.object",
        "args": {"input": "(?#predefined=paragraph)", "where": "end", "shift": "extend"},
        "when": "editorTextFocus && dance.mode == LINE"
    },

    
    // K
    {
        "key": "k",
        "command": "dance.select.up.jump",
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD)"
    },
    {
        "key": "k",
        "command": "dance.run",
        "args": {
            "commands": [
                ["dance.select.up.jump"],
                ["dance.selections.expandToLines"],
            ]
        },
        "when": "editorTextFocus && dance.mode == line"
    },
    {
        "key": "k",
        "command": "dance.seek.object",
        "args": {"input": "(?#predefined=paragraph)", "where": "start"},
        "when": "editorTextFocus && dance.mode == LINE"
    },

    {
        "key": "shift+k",
        "command": "dance.select.up.extend",
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD)"
    },
    {
        "key": "shift+k",
        "command": "dance.select.line.above.extend",
        "when": "editorTextFocus && dance.mode == line"
    },
    {
        "key": "shift+k",
        "command": "dance.seek.object",
        "args": {"input": "(?#predefined=paragraph)", "where": "start", "shift": "extend"},
        "when": "editorTextFocus && dance.mode == LINE"
    },


    // I
    {
        "key": "i",
        "command":"dance.modes.insert.before" ,
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD)"
    },
    {
        "key": "i",
        "command": "dance.modes.insert.lineStart",
        "when": "editorTextFocus && (dance.mode == line || dance.mode == LINE)"
    },
    {
        "key": "shift+i",
        "command": "dance.modes.insert.lineStart",
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD)"
    },
    {
        "key": "shift+i",
        "command": "dance.run",
        "args": {
           "commands": [
                ["dance.edit.newLine.above"],
                ["dance.select.up.jump"],
            ],
        },
        "when": "editorTextFocus && (dance.mode == line || dance.mode == LINE)"
    },


    // A
    {
        "key": "a",
        "command":"dance.modes.insert.after" ,
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD)"
    },
    {
        "key": "a",
        "command": "dance.modes.insert.lineEnd",
        "when": "editorTextFocus && (dance.mode == line || dance.mode == LINE)"
    },
    {
        "key": "shift+a",
        "command": "dance.modes.insert.lineEnd",
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD)"
    },
    {
        "key": "shift+a",
        "command": "dance.run",
        "args": {
           "commands": [
                ["dance.edit.newLine.below"],
                ["dance.select.down.jump"],
            ],
        },
        "when": "editorTextFocus && (dance.mode == line || dance.mode == LINE)"
    },


    // Y
    {
        "key": "y",
        "command": "dance.selections.saveText",
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD || dance.mode == line || dance.mode == LINE)"
    },
    {
        "key": "shift+y",
        "command": "dance.run",
        "args": {
           "commands": [
                ["dance.selections.save"],
                ["dance.selections.expandToLines"],
                ["dance.selections.saveText"],
                ["dance.selections.restore"]
            ]
        },
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD || dance.mode == line || dance.mode == LINE)"
    },

    
    // P
    {
        "key": "p",
        "command": "dance.edit.paste.after.select",
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD || dance.mode == line || dance.mode == LINE)"
    },
    {
        "key": "shift+p",
        "command": "dance.edit.paste.before.select",
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD || dance.mode == line || dance.mode == LINE)"
    },


    // D
    {
        "key": "d",
        "command": "dance.edit.yank-delete",
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD || dance.mode == line || dance.mode == LINE)"
    },
    {
        "key": "shift+d",
        "command": "dance.run",
        "args": {
           "commands": [
                ["dance.selections.expandToLines"],
                ["dance.edit.yank-delete"],
            ]
        },
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD || dance.mode == line || dance.mode == LINE)"
    },


    // R
    {
        "key": "r",
        "command": "dance.run",
        "args": {
           "commands": [
                ["dance.edit.yank-replace"],
                ["dance.selections.saveText"],
            ]
        },
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD || dance.mode == line || dance.mode == LINE)"
    },
    {
        "key": "shift+r",
        "command": "dance.run",
        "args": {
           "commands": [
                ["dance.selections.expandToLines"],
                ["dance.edit.yank-replace"],
                ["dance.selections.saveText"],
            ]
        },
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD || dance.mode == line || dance.mode == LINE)"
    },

    // C
    {
        "key": "c",
        "command": "dance.edit.yank-delete-insert",
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD || dance.mode == line || dance.mode == LINE)"
    },
    {
        "key": "shift+c",
        "command": "dance.run",
        "args": {
           "commands": [
                ["dance.selections.expandToLines"],
                ["dance.edit.yank-delete"],
                ["dance.edit.newLine.above.insert"],
            ]
        },
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD || dance.mode == line || dance.mode == LINE)"
    },


    // O
    {
        "key": "o",
        "command": "dance.edit.newLine.below.insert",
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD || dance.mode == line || dance.mode == LINE)"
    },
    {
        "key": "shift+o",
        "command": "dance.edit.newLine.above.insert",
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD || dance.mode == line || dance.mode == LINE)"
    },


    // U
    {
        "key": "u",
        "command": "runCommands",
        "args": {
            "commands": ["dance.history.undo", "removeSecondaryCursors"]
        },
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD || dance.mode == line || dance.mode == LINE)"
    },
    {
        "key": "shift+u",
        "command": "dance.history.redo",
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD || dance.mode == line || dance.mode == LINE)"
    },


    // S
    {
        "key": "s",
        "command": "dance.openMenu",
        "when": "editorTextFocus && (dance.mode == character || dance.mode == word || dance.mode == WORD || dance.mode == line || dance.mode == LINE)",
        "args": {
            "menu": {
                "items": {
                    "i": {
                        "text": "select inside",
                        "command": "dance.seek.askObject.inner",
                    },
                    "a": {
                        "text": "select around",
                        "command": "dance.seek.askObject",
                    },
                    "s": {
                        "text": "goto matching bracket",
                        "command": "dance.seek.enclosing"
                    },
                    "d": {
                        "text": "delete surround",
                        "command": "dance.run",
                        "args": {
                            "input": "await replace((x) => x.slice(1, -1))",
                            "commands": [
                                ".selections.save",
                                "dance.seek.askObject",
                                ".selections.reduce.edges",
                                ".edit.delete",
                                ".selections.restore",
                            ],
                        }
                    }
                }
            }
        }
    },
]